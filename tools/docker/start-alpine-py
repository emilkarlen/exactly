#!/bin/bash

HERE=$(dirname $0)
MY_NAME=$(basename $0)

readonly PY_VERSIONS='35 36 37 38 39'

function abs_path_of_repo_root() (
  cd ${HERE}/../..
  pwd
)

function exit_error() { # MSG...
  echo ${MY_NAME}': '$* >&2
  exit 1
}
source ${HERE}/config.sh

readonly REPO_ROOT_DIR=$(abs_path_of_repo_root)

readonly SHARE_DIR=/tmp/exactly-docker-share

readonly ACTION__TEST='test'
readonly ACTION__TEST_W_INSTALL='test-w-install'

readonly HELP="${MY_NAME} (-h|PY-VERSION) [ACTION]

PY-VERSION is one of: ${PY_VERSIONS}

ACTION
  ${ACTION__TEST}
    Run tests towards copy of mounted repo,
    and exit.

  ${ACTION__TEST_W_INSTALL}
    Run tests towards copy of mounted repo,
    including test against installation,
    and exit.

Starts the docker container
  ${DOCKER_IMAGE_PREFIX}<PY-VERSION>
as user
  ${NON_ROOT_USER}

ENVIRONMENT of files and dirs

  ${CONTAINER__REPO_ROOT}/
    Read-only mount of the current Exactly repo.

  ${CONTAINER__WORK_DIR}/
    Current directory.

  ${CONTAINER__VENV_DIR}/
    A Python virtual environment.

  ${CONTAINER__SHARE_DIR}/
    Read-write mount of dir ${SHARE_DIR} (for file sharing)
    ${SHARE_DIR} is created if it does not exist.
"

########################################
# Parse arguments

if [ "${1}" == '-h' ]; then
  echo "${HELP}"
  exit 0
fi

if [ ${#} -gt 2 ]; then
  echo -n "${HELP}"
  exit 0
fi

PY_V=${1}
shift

if ! [[ ${PY_V} =~ ^[[:digit:]][[:digit:]]$ && ${PY_VERSIONS} =~ ${PY_V} ]]; then
  exit_error "Unknown Python version (${PY_VERSIONS}): [${PY_V}]"
fi

DOCKER_IMAGE="${DOCKER_IMAGE_PREFIX}${PY_V}:latest"

docker image inspect ${DOCKER_IMAGE} >/dev/null ||
  exit_error "No docker image corresponding to Python version [${PY_V}]: [${DOCKER_IMAGE}]"

if [ ${#} -eq 1 ]; then
  case ${1} in
  ${ACTION__TEST})
    COMMAND=${ACTION__TEST__COMMAND}
    ;;
  ${ACTION__TEST_W_INSTALL})
    COMMAND=${ACTION__TEST_W_INSTALL__COMMAND}
    ;;
  *)
    exit_error "Unknown ACTION: [${1}]"
    ;;
  esac
fi

########################################
# Check prerequisites

if [ -e ${SHARE_DIR} ]; then
  [ -d ${SHARE_DIR} ] || exit_error "Not a directory: ${SHARE_DIR}"
else
  mkdir ${SHARE_DIR}
fi

########################################
# Do it

docker run --interactive --tty \
  --mount readonly,type=bind,source=${REPO_ROOT_DIR},target=${CONTAINER__REPO_ROOT} \
  --mount type=bind,source=${SHARE_DIR},target=${CONTAINER__SHARE_DIR} \
  --user ${NON_ROOT_USER} \
  --workdir ${CONTAINER__WORK_DIR} \
  --rm \
  ${DOCKER_IMAGE} ${COMMAND}
