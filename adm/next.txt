-*- org -*-

Fortsätt med

* TODO Skräddarsy act-fasen
** DONE Testa befintlig script-lng-setup individuellt
*** DONE Infrastruktur för test av act-phase-setup
** DONE Integrera Executor.validate i testfalls-exekveringen
** TODO Dokumetera ny utökad sekvens i UML
Nytt är act-exekverarens faser.
** DONE Implementera setup för single-kommando
Typ: "dir/mitt-program arg1 arg2"
Se till att resolva abs-path till detta kommando så att man kan använda
relativa sökvägar i testfallet.
** TODO (Ev) förbättra script-byggaren
Så att det går att separera på typ av rad (även på "färdiga" script):
- kommentar
- tom
- källkod
På så vis går det t ex att enkelt plocka ut enbart källkodsrader.  O m hjälp
av det skulle en singel-kommando-exekverare enkelt kunna verifiera att angivet
program verkligen består av ett enda kommando.
** TODO Då interpretator anges via CLA: resolva abs-sökväg till denna
... så att det går att ange relativa sökvägar på kommandoraden (o ev, i en
senare framtid, även i testsviter).
Ev två olika setup: en som resolvar relativa sökvagar, o en som inte gör det.
* TODO Svit: Summering i rapporten
Avslutande utskrift: Antal lyckade, fallerade, <andra typer av fel>
* TODO Exekvering av fall: Rapportera mha "Rapportör" (pss som svit)
* TODO Instruktioner
** DONE Impl instr för assert/exitcode
** DONE Testa parsing
** DONE Troligtvis: infrastruktur för test av instruktion
Tror räcker med "integrationstest" för exekveringen:
1. parsa
2. exekvera

Dvs behöver inte separata test för parsning o exekvering.  Tvärt om är det
troligtvis lämpligt att ha ett o samma test så att alla led testas.  Dessutom
blir troligtvis koden mer flexibel då man inte testar = kräver fix
representation av - "mellanled".
*** with EDS-and-act-result(exitcode, stdout_output, stderr_output) as eds:
** DONE Testa parsning + exekvering
** DONE Testa infrastrukturen för att parsa instruktioner i uppslagsverk
** TODO Lyft ut funk från impl av exitcode så att den blir allmänt tillgänglig
** DONE Ta bort nuv phase_enviroment från Assert-instruktionen
* TODO Kring instruktioner
** TODO PassOrFailOrHardError: FAIL ska kunna ta olika varianter av felmeddelande
- sträng
- förväntat värde, verkligt värde, namn på egenskap
Inför subklass för varje variant.
** TODO assert-instr: Infrastruktur för att hämta vanliga värden
T ex returkod, utdata på stdout/err.
Funk kan antingen
- ligga i ActPhaseInstruction
- objekct åtkomligt via medlemsmetod i ActPhaseInstruction
- objekt som skickas till main

Tror bäst att skicka obj till main.  Då kan infrastrukturen säkerställa att
alla instruktioner får samma objekt.  Därmed kan objektet lagra privat data då
den efterfrågats (prestanda)
