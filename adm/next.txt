-*- org -*-

Fortsätt med

* TODO Verkar inte bytt namn på setup/validate
Borde vara validate_post_setup
* Ny fas: before-assert
** DONE instruktion
** DONE fas-konstanter
** DONE test-infrastruktur
** DONE TestCaseGeneratorForTestCaseSetup
Används _PHASE_phase-metoderna??
** DONE step_phase.SETUP_PRE_VALIDATE bytas mot namn i linje m övriga
** DONE test-falls-dokument
*** DONE full
*** DONE partiell
** DONE Lägga till till listingar i phases
ALL_NAMED,
ALL
** DONE instruktions-uppsättning (default)
** DONE test-fall
*** DONE validate/pre-eds
*** DONE main
*** DONE validate/post-eds
**** DONE Tester
***** DONE miljövariabler
***** DONE aktuell katalog
**** DONE Exekvering
*** DONE tester av fallerande scenarier för main
** DONE andra - "globala" - test
** DONE Gör om InstructionsSetup till tuple
** DONE hjälp
* DONE shellcheck_lib_test/test_suite/execution.py:493 (fel arg)
* DONE Byt namn: post_eds -> post_setup
** Komponenter
*** metoder i instruktion
*** konstanter för fas-steg
** Faser
*** DONE act
*** DONE setup
*** DONE before-assert
*** DONE assert
*** DONE cleanup
* DONE Refaktorering av testhjälpmedel
shellcheck_lib_test/execution/test_resources/instruction_that_record_and_return.py
** DONE namnbyte: execute -> main
** använda PHASE_phase_instruction_that??
* DONE Diverse refaktoreringar
** DONE shellcheck_lib_test/execution/test_resources/instruction_that_do_and_return.py
instruktions-sub-klasserna ser inte helt ok.
Dels anropas fel funk, o alla metoder är inte impl.
Kanske kan de impl i termer av PHASE_phase_instruction_that
** DONE shellcheck_lib_test.execution.test_resources.instruction_that_record_and_return.TestCaseSetupWithRecorder
* TODO Ny validate/pre-eds: Befintliga instruktioner ska använda denna
** DONE setup - säkerställ att instr är korrekta
Finns inga tester som verifierar att validate_post_eds körs korrekt, ser det
ut som.
*** DONE execute
*** DONE dir
*** DONE env
*** DONE file
*** DONE install
*** DONE pwd
*** DONE shell
*** DONE stdin
** DONE cleanup
*** DONE infrastruktur för instruktions-tester
*** DONE dir
*** DONE execute
*** DONE pwd
*** DONE shell
** DONE assert
*** DONE infrastruktur för instruktions-tester
*** DONE contents
*** DONE dir
*** DONE execute
*** DONE exitcode
*** DONE pwd
*** DONE shell
*** DONE stderr
*** DONE stdout
*** DONE type
** TODO act
*** TODO infrastruktur för instruktions-tester
*** TODO Gör så att relativa sökvägar antas vara --rel-home
* TODO Refakt: validate_post_eds_if_applicable ska ta (EDS,home_dir)
klass: PreOrPostEdsSvhValidationErrorValidator

I nuläget tas enbart EDS.
Onödigt att begränsa till att ta enbart EDS.
Skulle ju kunna finnas en instruktion som använder både EDS och home_dir.
* TODO Lägga till instruktioner till before-assert
** TODO infrastruktur för instruktions-tester
** TODO shell
** TODO execute
** TODO pwd
** TODO dir
** TODO env
* cd
** Tester av instruktionerna
Finns tester av fas-oberoende utils.
** Test av flödet (full_execution, tror jag)
Testat att PWD inte ändras av ramverket.
* Skräddarsy act-fasen
** TODO Dokumetera ny utökad sekvens i UML
Nytt är act-exekverarens faser.
** TODO (Ev) förbättra script-byggaren
Så att det går att separera på typ av rad (även på "färdiga" script):
- kommentar
- tom
- källkod
På så vis går det t ex att enkelt plocka ut enbart källkodsrader.  O m hjälp
av det skulle en singel-kommando-exekverare enkelt kunna verifiera att angivet
program verkligen består av ett enda kommando.
** TODO Då interpretator anges via CLA: resolva abs-sökväg till denna
... så att det går att ange relativa sökvägar på kommandoraden (o ev, i en
senare framtid, även i testsviter).
Ev två olika setup: en som resolvar relativa sökvagar, o en som inte gör det.
** TODO Exekverare för shell-kommando
Väldigt lik utgångsexekveraren.  Skilnnaden är att köra m shell=True,
o ev inte splitta kommandoraden.
* Svit: Summering i rapporten
Avslutande utskrift: Antal lyckade, fallerade, <andra typer av fel>
* Exekvering av fall: Rapportera mha "Rapportör" (pss som svit)
* Kring instruktioner
** TODO PassOrFailOrHardError: FAIL ska kunna ta olika varianter av felmeddelande
- sträng
- förväntat värde, verkligt värde, namn på egenskap
Inför subklass för varje variant.
** TODO assert-instr: Infrastruktur för att hämta vanliga värden
T ex returkod, utdata på stdout/err.
Funk kan antingen
- ligga i ActPhaseInstruction
- objekct åtkomligt via medlemsmetod i ActPhaseInstruction
- objekt som skickas till main

Tror bäst att skicka obj till main.  Då kan infrastrukturen säkerställa att
alla instruktioner får samma objekt.  Därmed kan objektet lagra privat data då
den efterfrågats (prestanda)
