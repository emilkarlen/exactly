import pathlib
import unittest

from exactly_lib.symbol import concrete_restrictions
from exactly_lib.symbol import value_structure as vs
from exactly_lib.symbol.concrete_values import FileRefResolver, StringResolver, ValueVisitor, \
    SymbolValueResolver
from exactly_lib.symbol.value_resolvers.path_resolving_environment import PathResolvingEnvironmentPreOrPostSds
from exactly_lib.symbol.value_resolvers.string_resolvers import StringConstant
from exactly_lib.symbol.value_structure import ValueContainer, Value
from exactly_lib.test_case_file_structure.file_ref import FileRef
from exactly_lib.test_case_file_structure.home_and_sds import HomeAndSds
from exactly_lib.test_case_file_structure.path_relativity import PathRelativityVariants
from exactly_lib.test_case_file_structure.relativity_root import RelOptionType
from exactly_lib.test_case_file_structure.sandbox_directory_structure import SandboxDirectoryStructure
from exactly_lib.util.line_source import Line
from exactly_lib.util.symbol_table import SymbolTable, empty_symbol_table
from exactly_lib_test.symbol.test_resources.value_definition_utils import file_ref_value
from exactly_lib_test.symbol.test_resources.value_reference_assertions import equals_value_references
from exactly_lib_test.test_case_file_structure.test_resources.concrete_path_part import equals_path_part
from exactly_lib_test.test_case_file_structure.test_resources.file_ref import file_ref_equals, equals_file_ref2
from exactly_lib_test.test_case_file_structure.test_resources.simple_file_ref import file_ref_test_impl
from exactly_lib_test.test_resources.value_assertions import value_assertion as asrt


def resolver_equals3(expected: SymbolValueResolver) -> asrt.ValueAssertion:
    return _EqualsValue(expected)


def file_ref_resolver_equals(expected: FileRefResolver) -> asrt.ValueAssertion:
    return _AssertFileRefResolverIsIdenticalToInAutoGeneratedFakeEnvironment(expected)


def equals_file_ref_resolver2(expected_relativity_and_paths: FileRef,
                              expected_symbol_references: asrt.ValueAssertion,
                              symbol_table: SymbolTable = None) -> asrt.ValueAssertion:
    if symbol_table is None:
        symbol_table = empty_symbol_table()
    return _AssertFileRefResolverHasSpecifiedProperties(expected_relativity_and_paths,
                                                        expected_symbol_references,
                                                        symbol_table)


def equals_string_resolver2(expected_value: str,
                            symbol_references_assertion: asrt.ValueAssertion,
                            symbol_table: SymbolTable) -> asrt.ValueAssertion:
    return asrt.is_instance_with(StringResolver, asrt.and_([
        asrt.sub_component('resolved value',
                           lambda sv: sv.resolve(symbol_table),
                           asrt.equals(expected_value)),
        asrt.sub_component('references',
                           lambda sv: sv.references,
                           symbol_references_assertion),
    ]))


def equals_string_resolver3(expected: StringResolver) -> asrt.ValueAssertion:
    return _AssertStringValueIsIdenticalToInAutoGeneratedFakeEnvironment(expected)


class _FileRefResolverAssertionBase(asrt.ValueAssertion):
    def apply(self,
              put: unittest.TestCase,
              value,
              message_builder: asrt.MessageBuilder = asrt.MessageBuilder()):
        put.assertIsInstance(value, FileRefResolver,
                             'Actual value is expected to be a ' + str(FileRefResolver))
        assert isinstance(value, FileRefResolver)
        self._check_value_references(put, message_builder.for_sub_component('value_references'),
                                     value.references)

        environment = self._get_environment()

        expected_file_ref = self._expected_file_ref(environment.value_definitions)

        actual_file_ref = value.resolve(environment.value_definitions)
        file_ref_assertion = self._file_ref_assertion(expected_file_ref)
        file_ref_assertion.apply(put, actual_file_ref,
                                 message_builder.for_sub_component('resolved FileRef'))

    def _get_environment(self) -> PathResolvingEnvironmentPreOrPostSds:
        home_dir_path = pathlib.Path('home')
        sds = SandboxDirectoryStructure('sds')
        return PathResolvingEnvironmentPreOrPostSds(HomeAndSds(home_dir_path, sds),
                                                    self._get_symbol_table())

    def _get_symbol_table(self) -> SymbolTable:
        raise NotImplementedError()

    def _check_value_references(self,
                                put: unittest.TestCase,
                                message_builder: asrt.MessageBuilder,
                                actual: list):
        raise NotImplementedError()

    def _expected_file_ref(self, symbol_table: SymbolTable) -> FileRef:
        raise NotImplementedError()

    def _file_ref_assertion(self, expected_file_ref: FileRef) -> asrt.ValueAssertion:
        raise NotImplementedError()


class _AssertFileRefResolverHasSpecifiedProperties(_FileRefResolverAssertionBase):
    def __init__(self,
                 expected_relativity_and_paths: FileRef,
                 expected_symbol_references: asrt.ValueAssertion,
                 symbol_table: SymbolTable):
        self.expected_relativity_and_paths = expected_relativity_and_paths
        self.expected_symbol_references = expected_symbol_references
        self.symbol_table = symbol_table

    def _file_ref_assertion(self, expected_file_ref: FileRef) -> asrt.ValueAssertion:
        return equals_file_ref2(expected_file_ref, self.symbol_table)

    def _expected_file_ref(self, symbol_table: SymbolTable) -> FileRef:
        return self.expected_relativity_and_paths

    def _check_path_suffix(self,
                           put: unittest.TestCase,
                           actual: FileRef,
                           message_builder: asrt.MessageBuilder,
                           environment: PathResolvingEnvironmentPreOrPostSds):
        pass

    def _get_symbol_table(self) -> SymbolTable:
        return self.symbol_table

    def _check_value_references(self,
                                put: unittest.TestCase,
                                message_builder: asrt.MessageBuilder,
                                actual: list):
        self.expected_symbol_references.apply(put, actual, message_builder)


class _AssertFileRefResolverIsIdenticalToInAutoGeneratedFakeEnvironment(_FileRefResolverAssertionBase):
    def __init__(self, expected: FileRefResolver):
        self._expected = expected

    def _file_ref_assertion(self, expected_file_ref: FileRef) -> asrt.ValueAssertion:
        return file_ref_equals(expected_file_ref)

    def _expected_file_ref(self, symbols: SymbolTable) -> FileRef:
        return self._expected.resolve(symbols)

    def _check_path_suffix(self,
                           put: unittest.TestCase,
                           actual: FileRef,
                           message_builder: asrt.MessageBuilder,
                           environment: PathResolvingEnvironmentPreOrPostSds):
        sym_tbl = environment.value_definitions
        path_suffix = self._expected_file_ref(sym_tbl).path_suffix()
        equals_path_part(path_suffix).apply(put,
                                            actual.path_suffix(),
                                            message_builder)

    def _get_environment(self) -> PathResolvingEnvironmentPreOrPostSds:
        home_dir_path = pathlib.Path('home')
        sds = SandboxDirectoryStructure('sds')
        return PathResolvingEnvironmentPreOrPostSds(HomeAndSds(home_dir_path, sds),
                                                    self._get_symbol_table())

    def _get_symbol_table(self) -> SymbolTable:
        return _symbol_table_with_values_matching_references(self._expected.references)

    def _check_value_references(self,
                                put: unittest.TestCase,
                                message_builder: asrt.MessageBuilder,
                                actual: list):
        assertion = equals_value_references(self._expected.references)
        assertion.apply(put, actual, message_builder)


class _AssertStringValueIsIdenticalToInAutoGeneratedFakeEnvironment(asrt.ValueAssertion):
    def __init__(self, expected: StringResolver):
        self._expected = expected

    def apply(self,
              put: unittest.TestCase,
              value,
              message_builder: asrt.MessageBuilder = asrt.MessageBuilder()):
        put.assertIsInstance(value, StringResolver,
                             'Actual value is expected to be a ' + str(StringResolver))
        assert isinstance(value, StringResolver)
        self._check_value_references(put, message_builder.for_sub_component('value_references'),
                                     value.references)

        symbols = self._get_symbol_table()

        expected_string = self._expected.resolve(symbols)

        actual_string = value.resolve(symbols)
        put.assertEquals(expected_string,
                         actual_string,
                         'Resolved string value')

    def _get_symbol_table(self) -> SymbolTable:
        return _symbol_table_with_values_matching_references(self._expected.references)

    def _check_value_references(self,
                                put: unittest.TestCase,
                                message_builder: asrt.MessageBuilder,
                                actual: list):
        assertion = equals_value_references(self._expected.references)
        assertion.apply(put, actual, message_builder)


def file_ref_val_test_impl(valid_relativities: PathRelativityVariants) -> FileRefResolver:
    relativity = list(valid_relativities.rel_option_types)[0]
    assert isinstance(relativity, RelOptionType)
    return file_ref_value(file_ref_test_impl('file_ref_test_impl', relativity))


def _value_container(value: FileRefResolver) -> ValueContainer:
    return ValueContainer(Line(1, 'source line'), value)


def _symbol_table_with_values_matching_references(references: list) -> SymbolTable:
    value_constructor = _ValueCorrespondingToValueRestriction()
    elements = {}
    for ref in references:
        assert isinstance(ref, vs.ValueReference), "Informs IDE of type"
        value_restriction = ref.value_restriction
        assert isinstance(value_restriction, concrete_restrictions.ValueRestriction)
        value = value_constructor.visit(value_restriction)
        elements[ref.name] = _value_container(value)
    return SymbolTable(elements)


class _ValueCorrespondingToValueRestriction(concrete_restrictions.ValueRestrictionVisitor):
    def visit_none(self, x: concrete_restrictions.NoRestriction) -> Value:
        return StringConstant('a string (from <no restriction>)')

    def visit_string(self, x: concrete_restrictions.StringRestriction) -> Value:
        return StringConstant('a string (from <string value restriction>)')

    def visit_file_ref_relativity(self, x: concrete_restrictions.FileRefRelativityRestriction) -> Value:
        return file_ref_val_test_impl(x.accepted)

    def visit_string_or_file_ref_relativity(self, x: concrete_restrictions.EitherStringOrFileRefRelativityRestriction
                                            ) -> Value:
        return self.visit_file_ref_relativity(x.file_ref_restriction)


class _EqualsValueVisitor(ValueVisitor):
    def __init__(self,
                 actual,
                 put: unittest.TestCase,
                 message_builder: asrt.MessageBuilder):
        self.message_builder = message_builder
        self.put = put
        self.actual = actual

    def _visit_file_ref(self, expected: FileRefResolver):
        return file_ref_resolver_equals(expected).apply(self.put, self.actual, self.message_builder)

    def _visit_string(self, expected: StringResolver):
        return equals_string_resolver3(expected).apply(self.put, self.actual, self.message_builder)


class _EqualsValue(asrt.ValueAssertion):
    def __init__(self, expected: SymbolValueResolver):
        self.expected = expected

    def apply(self,
              put: unittest.TestCase,
              value,
              message_builder: asrt.MessageBuilder = asrt.MessageBuilder()):
        _EqualsValueVisitor(value, put, message_builder).visit(self.expected)
