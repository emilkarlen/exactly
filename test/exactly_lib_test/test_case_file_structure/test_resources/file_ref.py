import pathlib
import unittest

from exactly_lib.test_case_file_structure.file_ref import FileRef
from exactly_lib.test_case_file_structure.home_and_sds import HomeAndSds
from exactly_lib.test_case_file_structure.path_relativity import PathRelativityVariants
from exactly_lib.test_case_file_structure.path_resolving_environment import PathResolvingEnvironmentPreOrPostSds
from exactly_lib.test_case_file_structure.relativity_root import RelOptionType
from exactly_lib.test_case_file_structure.sandbox_directory_structure import SandboxDirectoryStructure
from exactly_lib.util.line_source import Line
from exactly_lib.util.symbol_table import SymbolTable, empty_symbol_table
from exactly_lib.value_definition import concrete_restrictions
from exactly_lib.value_definition.concrete_values import FileRefResolver
from exactly_lib.value_definition.value_resolvers.string_resolvers import StringConstant
from exactly_lib.value_definition.value_structure import ValueContainer, Value
from exactly_lib_test.test_case_file_structure.test_resources.concrete_path_part import equals_path_part
from exactly_lib_test.test_case_file_structure.test_resources.path_relativity import equals_path_relativity
from exactly_lib_test.test_case_file_structure.test_resources.simple_file_ref import file_ref_test_impl
from exactly_lib_test.test_resources.value_assertions import value_assertion as asrt
from exactly_lib_test.value_definition.test_resources.value_definition_utils import file_ref_value


def file_ref_equals(expected: FileRef) -> asrt.ValueAssertion:
    return _AssertFileRefIsIdenticalToInAutoGeneratedFakeEnvironment(expected)


def equals_file_ref2(expected_relativity_and_paths: FileRef,
                     symbol_table: SymbolTable) -> asrt.ValueAssertion:
    return _AssertFileRefHasSpecifiedProperties(expected_relativity_and_paths,
                                                symbol_table)


class _FileRefAssertionBase(asrt.ValueAssertion):
    def __init__(self, expected: FileRef):
        self._expected = expected

    def apply(self,
              put: unittest.TestCase,
              value,
              message_builder: asrt.MessageBuilder = asrt.MessageBuilder()):
        put.assertIsInstance(value, FileRef,
                             'Actual value is expected to be a ' + str(FileRef))
        assert isinstance(value, FileRef)

        environment = self._get_environment()

        self._check_path_suffix(put,
                                value,
                                message_builder.for_sub_component('path_suffix'),
                                environment)

        self._check_relativity(put, value, message_builder, environment)

        self._check_exists_pre_sds(put, value, message_builder, environment)

        self._check_paths(put, value, message_builder, environment)

    def _get_environment(self) -> PathResolvingEnvironmentPreOrPostSds:
        home_dir_path = pathlib.Path('home')
        sds = SandboxDirectoryStructure('sds')
        return PathResolvingEnvironmentPreOrPostSds(HomeAndSds(home_dir_path, sds),
                                                    empty_symbol_table())

    def _check_path_suffix(self,
                           put: unittest.TestCase,
                           actual: FileRef,
                           message_builder: asrt.MessageBuilder,
                           environment: PathResolvingEnvironmentPreOrPostSds):
        raise NotImplementedError()

    def _check_value_references(self,
                                put: unittest.TestCase,
                                message_builder: asrt.MessageBuilder,
                                actual: list):
        raise NotImplementedError()

    def _check_exists_pre_sds(self,
                              put: unittest.TestCase,
                              actual: FileRef,
                              message_builder: asrt.MessageBuilder,
                              environment: PathResolvingEnvironmentPreOrPostSds):
        expected_exists_pre_sds = self._expected.exists_pre_sds(environment.value_definitions)
        put.assertEqual(expected_exists_pre_sds,
                        actual.exists_pre_sds(environment.value_definitions),
                        message_builder.apply('exists_pre_sds'))

    def _check_paths(self,
                     put: unittest.TestCase,
                     actual: FileRef,
                     message_builder: asrt.MessageBuilder,
                     environment: PathResolvingEnvironmentPreOrPostSds):
        expected_exists_pre_sds = self._expected.exists_pre_sds(environment.value_definitions)
        if expected_exists_pre_sds:
            put.assertEqual(self._expected.file_path_pre_sds(environment),
                            actual.file_path_pre_sds(environment),
                            message_builder.apply('file_path_pre_sds'))
        else:
            put.assertEqual(self._expected.file_path_post_sds(environment),
                            actual.file_path_post_sds(environment),
                            message_builder.apply('file_path_post_sds'))

    def _check_relativity(self,
                          put: unittest.TestCase,
                          actual_file_ref: FileRef,
                          message_builder: asrt.MessageBuilder,
                          environment: PathResolvingEnvironmentPreOrPostSds):
        expected = self._expected.relativity(environment.value_definitions)
        actual = actual_file_ref.relativity(environment.value_definitions)
        assertion = equals_path_relativity(expected)
        assertion.apply(put, actual, message_builder.for_sub_component('specific_relativity'))


class _AssertFileRefHasSpecifiedProperties(_FileRefAssertionBase):
    def __init__(self,
                 expected_relativity_and_paths: FileRef,
                 symbol_table: SymbolTable):
        super().__init__(expected_relativity_and_paths)
        self.expected_relativity_and_paths = expected_relativity_and_paths
        self.symbol_table = symbol_table

    def _check_path_suffix(self,
                           put: unittest.TestCase,
                           actual: FileRef,
                           message_builder: asrt.MessageBuilder,
                           environment: PathResolvingEnvironmentPreOrPostSds):
        pass

class _AssertFileRefIsIdenticalToInAutoGeneratedFakeEnvironment(_FileRefAssertionBase):
    def __init__(self, expected: FileRef):
        super().__init__(expected)

    def _check_path_suffix(self,
                           put: unittest.TestCase,
                           actual: FileRef,
                           message_builder: asrt.MessageBuilder,
                           environment: PathResolvingEnvironmentPreOrPostSds):
        sym_tbl = environment.value_definitions
        path_suffix = self._expected.path_suffix()
        equals_path_part(path_suffix).apply(put,
                                            actual.path_suffix(),
                                            message_builder)

    def _get_environment(self) -> PathResolvingEnvironmentPreOrPostSds:
        home_dir_path = pathlib.Path('home')
        sds = SandboxDirectoryStructure('sds')
        return PathResolvingEnvironmentPreOrPostSds(HomeAndSds(home_dir_path, sds),
                                                    empty_symbol_table())


def file_ref_val_test_impl(valid_relativities: PathRelativityVariants) -> FileRefResolver:
    relativity = list(valid_relativities.rel_option_types)[0]
    assert isinstance(relativity, RelOptionType)
    return file_ref_value(file_ref_test_impl('file_ref_test_impl', relativity))


def _value_container(value: FileRefResolver) -> ValueContainer:
    return ValueContainer(Line(1, 'source line'), value)


class _ValueCorrespondingToValueRestriction(concrete_restrictions.ValueRestrictionVisitor):
    def visit_none(self, x: concrete_restrictions.NoRestriction) -> Value:
        return StringConstant('a string (from <no restriction>)')

    def visit_string(self, x: concrete_restrictions.StringRestriction) -> Value:
        return StringConstant('a string (from <string value restriction>)')

    def visit_file_ref_relativity(self, x: concrete_restrictions.FileRefRelativityRestriction) -> Value:
        return file_ref_val_test_impl(x.accepted)

    def visit_string_or_file_ref_relativity(self, x: concrete_restrictions.EitherStringOrFileRefRelativityRestriction
                                            ) -> Value:
        return self.visit_file_ref_relativity(x.file_ref_restriction)
