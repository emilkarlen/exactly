<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Exactly Users Guide And Reference Manual</title>

    <author>
      <firstname>Emil</firstname>

      <surname>Karlén</surname>
    </author>
  </bookinfo>

  <chapter>
    <title>Debugging tests</title>

    <section>
      <title>Vill ta med</title>

      <para>Olika sätt att köra exactly för att debugga tester.</para>

      <section>
        <title>Vad kommer ut från programmet? Experimentera med detta</title>

        <para>exactly --execute</para>

        <para>Ekvivalent med att köra programmet med de förutsättningar som
        anges i [setup]</para>

        <para>Ett enkelt sätt att experimentera med vad programmet gör.</para>
      </section>

      <section>
        <title>Inspektion av EDS efter olika faser</title>

        <para>Växlar som kör programmet t.o.m en given fas. Lämnar kvar EDS
        och skriver ut sökvägen till EDS så att innehållet kan
        inspekteras.</para>

        <variablelist>
          <varlistentry>
            <term>--setup</term>

            <listitem>
              <para>Kör t.o.m [setup]</para>

              <para>Möjlighet att ta reda på vad [setup] gör.</para>

              <para>Problematik: Se värdet hos miljövariabler. Vore bra att
              kunna spara dem på något sätt.</para>

              <para>Det är relaterat till möjligheten att fortsätta
              testafallet från [setup], dvs köra från och med [act].</para>

              <para>Vore bra om miljövariabler kunde sparas på ett sätt som
              gör det möjligt att återställa dem. </para>

              <para>Ett sätt är att serialisera dem m pythons funktionallitet
              för detta. En nackdel med detta är att det är svårt för ett
              mänsklikt öga att inspektera dem.</para>

              <para>Ett sätt att göra dem inspekterbara är att bygga in en
              funktion i exactly för att visa dem på ett human-readable
              sätt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>--act</term>

            <listitem>
              <para>Kör t.o.m [act]</para>

              <para>Möjlighet att ta reda på vad [setup] gör, och vad [act]
              gör.</para>

              <para>Kika i EDS/result för att se programmets resultat.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Experimentera med manuell [setup]</title>

        <orderedlist>
          <listitem>
            <para>exactly --setup</para>

            <para>Kör testet till och med [setup]. Rapportera EDS rot.</para>
          </listitem>

          <listitem>
            <para>Inspektera och justera EDS</para>

            <para>Nu finns möjlighet att se vad [setup] gör.</para>

            <para>Finns också möjlighet att manuellt ändra innehållet i EDS
            för att simulera en [setup].</para>
          </listitem>

          <listitem>
            <para>Fortsätt testet i den befintliga EDS</para>

            <para>exactly --continue-from-act EDS</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Köra ett intervall av faser</title>

        <para>Behövs detta? Inte säkert. En tjusig funktion. Men inte helt
        nödvändig. Har man stora problem med ett test bestyder det att man har
        stora problem med programmet i sig. Då är kanske en naturligare
        lösning att ta reda på hur programmet fungerar. Ev med dokumentation,
        eller genom att debugga det med debugger för det språk i vilket
        programmet är skrivet.</para>

        <para>Man har kört ett test fram till en viss fas med exactly
        --to-PHASE.</para>

        <para>Man vill fortsätta, men inte ändra fram till slutet:</para>

        <para>exactly --from-PHASE+1 --to-PHASE+(n&gt;1).</para>

        <para/>
      </section>

      <section>
        <title>Namn på växlar</title>

        <section>
          <title>Växlar som kör ett test till och med en given fas</title>

          <para>Namn på växel identiskt med fas:</para>

          <itemizedlist>
            <listitem>
              <para>setup</para>
            </listitem>

            <listitem>
              <para>act</para>
            </listitem>

            <listitem>
              <para>assert</para>
            </listitem>
          </itemizedlist>

          <para>Namn på växel talar om hur långt testet körs:</para>

          <itemizedlist>
            <listitem>
              <para>--until-setup / --to-setup</para>
            </listitem>

            <listitem>
              <para>--until-act / --to-act</para>
            </listitem>

            <listitem>
              <para>--until-assert / --to-assert</para>
            </listitem>
          </itemizedlist>

          <para>Denna konvention fungerar bra tillsammans med växlar som
          fortsätter exekveringen:</para>

          <itemizedlist>
            <listitem>
              <para>--from-act</para>
            </listitem>

            <listitem>
              <para>--from-assert</para>
            </listitem>

            <listitem>
              <para>--from-cleanup</para>
            </listitem>

            <listitem>
              <para/>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>
  </chapter>
</book>
