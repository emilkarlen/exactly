-*- org -*-

https://packaging.python.org/

* CHANGELOG should contain entry for each change
See https://keepachangelog.com/en/1.0.0/
**  Template
## [VERSION] - YYYY-MM-DD
## [Unreleased]

### Added
### Changed
### Deprecated
### Removed
### Fixed
### Security
* HOWTO-UPGRADE
Should contain a description of how to upgrade
each backwards incompatible change from the previous version.
* README - Development info
** Development status
** Future development
Make sure to be in line with the release
* doc/
** TODOs
** BUGSs
* Contact info in COPYRIGHT
Make sure the contact info at the end of the COPYRIGHT is correct.
* Minimum Python version
** program_info.py
** pyproject.toml
*** requires-python
*** classifiers
** README
* github pages - Add Ref Man for release version
Note: The version number in the doc has not been updated
yet, but this is ok: this allows us to update README
and test its lik to the ref-man.
The manual on github pages can be updated any time later.
** exactly/version/Z-Y-Z/reference-manual.html
* Set version number
** code
src/exactly_lib/program_info.py
** CHANGELOG
** HOWTO-UPGRADE
** README - update link to Ref Man on github pages
* Test
** run-test-suite.py
** Run tests towards installed program
*** 1. Build distribution
 > make clean; make build
*** 2. Activate virtual environment "venv"
 - If venv does not exist, create it with
    > make venv
 - Enter the venv
    > . venv/bin/activate
*** 3. Install in venv
 > make install
*** 4. Run tests
 > python3 test/run-test-suite-towards-installed-program.py
*** 5. Exit the venv
 > deactivate
*** 6. Remove install from venv
 > make uninstall-venv
** run exactly tests
 > exactly suite test/exactly-cases
** Run on as many platforms as possible - on linux using docker
* Make sure syntax of examples is correct
* README - link to Ref Man on github pages
** Check that link from README shows Ref Man for correct version
** Validate syntax
python3 -m rstvalidator README.rst
* github pages - Add README for the new release
** exactly/version/Z-Y-Z/README.rst
* Set release date
** COPYRIGHT
Make sure release year is included in COPYRIGHT
** CHANGELOG
* Make release artifacts
** Remove existing distributables
> make clean
** Make distributables
Distribute source and wheel

> make build
* Upload to PyPi test
** Upload
*** Account on PyPi test
First you must have access to an account on TestPyPI

See https://packaging.python.org/en/latest/guides/using-testpypi/

Add TestPyPI to your `~/.pypirc`:

    [distutils]

    index-servers = testpypi

    [testpypi]

    repository = https://test.pypi.org/legacy/
    username   = __token__
    password   = <TOKEN>

Be sure to use the same name for the repoository in `./pypirc` as in
`Makefile`.
*** Upload
    > make upload-test
** Check
*** README: links to RefMan
* Upload to PyPi prod
    > make upload
* github pages: Make "latest" sym link point to latest release
exactly/version/latest
* wiki
** Update examples
Run tests in examples/wiki,
and if changes are needed to make these work,
make the same changes to wiki.
* Tag repo with version
Tag repo after upload to PyPi,
so that the release on PyPi is verified.

> git tag vVERSION
> git push --tags
* Make release on github
* Learning PyPi
http://peterdowns.com/posts/first-time-with-pypi.html
** Upload to PyPI Live

Once you've successfully uploaded to PyPI Test, perform the same steps but
point to the live PyPI server instead. To register, run:

> python setup.py register -r pypi
Then, run:

> python setup.py sdist upload -r pypi
and you're done! Congratulations on successfully publishing your first package!
