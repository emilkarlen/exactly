<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Exactly 0.9</title>
  </info>

  <section>
    <title>Concepts</title>

    <section>
      <title>Symbol</title>

      <para>A named, constant, value.</para>

      <para>A symbol corresponds to a variable, found in most programming
      languages, except that it is constant.</para>

      <itemizedlist>
        <listitem>
          <para>purpose, structure</para>

          <itemizedlist>
            <listitem>
              <para>type system (data / logic)</para>
            </listitem>

            <listitem>
              <para/>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>def</para>
        </listitem>

        <listitem>
          <para>ref</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Types</title>

        <para>The value of a symbol has a type according to Exactly's type
        system.</para>

        <para>The types are:</para>

        <itemizedlist>
          <listitem>
            <para>Data types</para>
          </listitem>

          <listitem>
            <para>Logic types</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Definition</title>

        <para>A symbol is defined using the <command>def</command>
        instruction:</para>

        <programlisting>def string SYMBOL_NAME = "the symbol value"</programlisting>

        <para>This defines the symbol <code>SYMBOL_NAME</code> to be the value
        <code>the symbol value</code>, which is a value of type
        <code>string</code>.</para>

        <para>The type must be given explicitly.</para>

        <programlisting>def list             LIST_SYMBOL = first second "the third"

def file-transformer REPLACE_ID  = replace [0-9]{10} ID</programlisting>

        <para>&lt;Describe syntax (reg-ex) of symbol name&gt;</para>
      </section>

      <section>
        <title>Reference</title>

        <para>A symbol must be defined before it is referenced.</para>

        <para>A symbol reference may appear as an instruction argument, in
        most places where an argument of a certain type is expected.</para>

        <para>There are two forms of symbol references:</para>

        <variablelist>
          <varlistentry>
            <term>plain symbol name</term>

            <listitem>
              <para><code>SYMBOL_NAME</code></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>special syntax</term>

            <listitem>
              <para><code>@[SYMBOL_NAME]@</code></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The plain symbol name is used where a reference is
        unambiguous.</para>

        <programlisting>def string S = "reference to @[symbol_name]@"

exists --file --rel DIR_SYMBOL @[BASE_NAME_SYMBOL]@

stdout --transformed ( select LINE_MATCHER_SYMBOL ) ! empty</programlisting>

        <note>
          <para>--TRANSFORMED instead of --TRANSFORMATION</para>
        </note>
      </section>
    </section>

    <section>
      <title>Type</title>

      <para>What are types used for?</para>

      <para>Type of</para>

      <itemizedlist>
        <listitem>
          <para>instruction argument (most instruction arguments have a
          type)</para>
        </listitem>

        <listitem>
          <para>symbol (every symbol has a type)</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Does every instruction argument value has a type?</title>

        <para>No, here document is a string, but a string symbol cannot be
        defined in terms of a here doc. This should be fixed - a here doc is
        just an alt syntax of strings.</para>

        <itemizedlist>
          <listitem>
            <para>string, here-document, custom syntax to eol for run
            --source</para>

            <para>All these can be considered to be strings, since the value
            is treated in the same way.</para>

            <para>What differs is the syntax. So there are many different
            syntaxes for strings.</para>
          </listitem>

          <listitem>
            <para>enums: file, dir, symlink</para>

            <para>There is no type for these enumerated values.</para>
          </listitem>

          <listitem>
            <para>delimiters. For example "(", ")", "|" for logical data type
            values</para>

            <para>These can be considered to be part of the syntax for the
            corresponding logic data type.</para>
          </listitem>

          <listitem>
            <para>expression for integers</para>

            <para>The syntax is the syntax for strings. And referenced symbols
            must be strings.</para>

            <para>Or, the syntax is the syntax of Python expressions.</para>

            <para>From Exactly's point of view of parsing, the syntax is that
            of strings.</para>

            <para>From the point of view of evaluation, the syntax is that of
            Python expressions.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Expressions and syntax</title>

        <para>Exactly has a very limited, and specialized syntax for
        expressions.</para>

        <para>A lot of values must be supplied as a constant and cannot
        involve arbitrary expressions. For example file type argument
        <token>file</token>, <token>dir</token>, <token>symlink</token>,
        cannot be given as an expression involving symbol references,e.g. Also
        regular expressions must be given literary. On the other hand,
        integers may be given as an Python expression involving symbol
        references.</para>

        <para>The most sofisticated, and conventional syntax is the one for
        logic type values.</para>

        <para>Syntax for paths is highly specialized.</para>

        <para>Syntax for lists is simple, but relatively conventional and
        clear.</para>

        <para>Syntax for strings is very specialized and does not support
        conventional expressions (x + y becomes "@[x]@ @[y]@")</para>
      </section>

      <section>
        <title>One line</title>

        <para>Type system for symbols and instruction arguments</para>
      </section>

      <section>
        <title>Main rest</title>

        <para>PGM has a type system specialized for test cases.</para>

        <para>Every symbol, and most instruction arguments, have a
        type.</para>

        <para>There are two categories of types:</para>

        <itemizedlist>
          <listitem>
            <para>data types<itemizedlist>
                <listitem>
                  <para>string</para>
                </listitem>

                <listitem>
                  <para>path</para>
                </listitem>

                <listitem>
                  <para>list</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>logic types</para>

            <itemizedlist>
              <listitem>
                <para>line matcher</para>
              </listitem>

              <listitem>
                <para>file matcher</para>
              </listitem>

              <listitem>
                <para>file transformer</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>A data type value is pure data.</para>

        <para>A logic type value is a pure function.</para>
      </section>

      <section>
        <title>Syntax</title>

        <para>Logic type values has a syntax that resembles common syntax of
        expressions.</para>

        <para>Each data type, on the other hand, has it's own specialized
        syntax.</para>
      </section>

      <section>
        <title>Type conversion (of data types)</title>

        <!--Should be described as part of descr of specific type. But overall cast func should be described here.

But perhaps the type sys does not support casting. Instead, different syntaxes allow for constructing of type B from type A.

Yes, casting is supported - casting data type -> string-->

        <section>
          <title>path|list -&gt; string</title>

          <para>Paths and lists are casted to strings.</para>
        </section>

        <section>
          <title>path</title>

          <variablelist>
            <varlistentry>
              <term>PATH = PATH</term>

              <listitem>
                <para/>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>PATH = RELATIVITY SUB-PATH (string) : RELATIVITY
              STRING</term>

              <listitem>
                <para/>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term/>

              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
    </section>

    <section>
      <title>Syntax</title>

      <para>A type may have many syntaxes</para>

      <section>
        <title>STRING</title>

        <para>Many syntaxes</para>

        <itemizedlist>
          <listitem>
            <para>here document</para>
          </listitem>

          <listitem>
            <para>hard quoted</para>
          </listitem>

          <listitem>
            <para>soft quoted</para>
          </listitem>

          <listitem>
            <para>unquoted</para>
          </listitem>
        </itemizedlist>

        <para>References to path and list symbols are converted to string
        values.</para>
      </section>

      <section>
        <title>PATH</title>

        <para>Relativity options vary.</para>

        <para>[RELATIVITY] STRING</para>

        <note>
          <para>Special syntax for definition of path symbol: empty
          string.</para>

          <para>This denots the default relativity root directory. An
          alternative equivalent specification is ".".</para>

          <para>Believe it is best to note this in doc of
          <command>def</command> - add "special" notes about value syntax. A
          bit strange to have notes about syntax in this way - notes to be
          "integrated" into the syntax description found in a separate
          place.</para>
        </note>

        <section>
          <title>Få med</title>

          <itemizedlist>
            <listitem>
              <para>syntax [RELATIVITY] STRING</para>
            </listitem>

            <listitem>
              <para>description</para>

              <para>an absolute path, or relative the current directory - a
              relative or absolute path.</para>

              <para>Vad ska beskrivas i type/path, och vad i
              syntax/path?</para>

              <para>Kan bli abstrakt = svårbegripligt att beskriva i type/path
              i och med att syntaxen inte visas.</para>

              <para>Men borde kunna ge en övergripande vettig beskrivning.
              Kanske tom bra att beskriva koncepten utan att blanda in
              syntax.</para>

              <para>Begrepp</para>

              <itemizedlist>
                <listitem>
                  <para>test case directories</para>
                </listitem>

                <listitem>
                  <para>home directories</para>
                </listitem>

                <listitem>
                  <para>sandbox directories</para>
                </listitem>

                <listitem>
                  <para>current directory</para>
                </listitem>

                <listitem>
                  <para>path</para>
                </listitem>

                <listitem>
                  <para>path component</para>
                </listitem>

                <listitem>
                  <para>Posix syntax (syntax)</para>
                </listitem>

                <listitem>
                  <para>absolute path</para>
                </listitem>

                <listitem>
                  <para>relative path</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>STRING</para>

              <itemizedlist>
                <listitem>
                  <para>STRING är sträng - syntax för type/string.</para>
                </listitem>

                <listitem>
                  <para>STRING: Kan innehålla symbolreferenser pss som
                  strängar gör det. (behöver nämnas här?? nämns i syntax-beskr
                  för STRING. men vettigt att nämna här för att underlätta för
                  användaren genom att begränsa antalet noder denne behöver
                  hitta och läsa).</para>

                  <para>STRING may contain symbol references using special
                  syntax, if unquoted or inside double quotes.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>relativitet</para>

              <itemizedlist>
                <listitem>
                  <para>Vad relativitet betyder</para>
                </listitem>

                <listitem>
                  <para>Lista o förklaring av alla relativiteter</para>
                </listitem>

                <listitem>
                  <para>Olika "platser"/"användningar" har en delmängd av
                  dessa relativiteter.</para>
                </listitem>

                <listitem>
                  <para>Utgångs-relativitet beroende på plats (kan vara olika
                  inom en och samma instruktion). Utgångsrelativitet varierar
                  - försöker vara vanligt förekommande val.</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>STRING</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Where</title>

          <variablelist>
            <varlistentry>
              <term>RELATIVITY</term>

              <listitem>
                <para>Specifies a directory that the given STRING is relative
                to.</para>

                <para>If relativity is given, STRING must be a relative path
                (, and it is relative the given directory.)</para>

                <para>Relativity variants</para>

                <itemizedlist>
                  <listitem>
                    <para>one of Exactly's test case directories/predefined
                    directories / a dir in the test case directory structure /
                    one of the test case directories.</para>

                    <itemizedlist>
                      <listitem>
                        <para>one of the directories in the HDS</para>

                        <variablelist>
                          <varlistentry>
                            <term><option>--rel-home</option></term>

                            <listitem>
                              <para>STRING is relative the ...</para>
                            </listitem>
                          </varlistentry>

                          <varlistentry>
                            <term><option>--rel-act-home</option></term>

                            <listitem>
                              <para>STRING is relative the ...</para>
                            </listitem>
                          </varlistentry>
                        </variablelist>
                      </listitem>

                      <listitem>
                        <para>one of the directories in the SDS</para>

                        <variablelist>
                          <varlistentry>
                            <term><option>--rel-act</option></term>

                            <listitem>
                              <para>STRING is relative the ...</para>
                            </listitem>
                          </varlistentry>

                          <varlistentry>
                            <term><option>--rel-tmp</option></term>

                            <listitem>
                              <para>STRING is relative the ...</para>
                            </listitem>
                          </varlistentry>
                        </variablelist>
                      </listitem>
                    </itemizedlist>
                  </listitem>

                  <listitem>
                    <para>relative the current directory - the directory that
                    is CD when the PATH is used</para>

                    <variablelist>
                      <varlistentry>
                        <term><option>--rel-cd</option></term>

                        <listitem>
                          <para>STRING is relative the current
                          directory.</para>

                          <para>(the directory that is current when the path
                          is used.)</para>

                          <note>
                            <para>For defining symbols. It must be clear that
                            the path is relative the D that is CD <emphasis>when
                            the symbol/path is used</emphasis>, and not when it
                            is defined.</para>

                            <para>This may be mentioned either here - at descr
                            of PATH syntax - and/or at descr of def.</para>
                          </note>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>

                  <listitem>
                    <para>relative a path symbol</para>

                    <variablelist>
                      <varlistentry>
                        <term><option>--rel</option> SYMBOL</term>

                        <listitem>
                          <para>STRING is relative the path denoted by a
                          symbol.</para>

                          <para>The plain symbol name is used (not special
                          reference syntax)</para>

                          <para>SYMBOL must have been defined as a path
                          symbol/value.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>STRING</term>

              <listitem>
                <para>An absolute or relative directory, using Posix syntax.
                '/' as directory separator.</para>

                <para>A string according to STRING SYNTAX.</para>

                <para>May contain symbol references. Referenced symbol must be
                either of type "string" or "path".</para>

                <para>If s path symbol is referenced, it must be the initial
                path component. The reason for this is that path symbols denot
                absolute paths. (Even if a path symbol is defined relative the
                CD, it is considered to be an absolute path, since the CD is
                an absolute path at the moment the path is
                used/resolved).</para>

                <para>A symbol that is the initial path component may be a
                path symbol (defined with type path). If it is, a RELATIVITY
                option may not be given.</para>

                <para/>

                <para>Symbol references use special syntax @[SYMBOL]@ /
                @[SYMBOL_NAME]@ / @[NAME]@</para>

                <para>E tries to be clever at interpreting symbols. If it
                begins with a symbol S (S/P) that denots an absolute path,
                then it is the same as giving --rel S P.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section>
          <title>Description</title>

          <itemizedlist>
            <listitem>
              <para>If RELATIVITY is not given, and STRING is a relative path,
              then STRING is relative a default relativity root.</para>

              <para>The default root depends on the instruction where the path
              is used.</para>

              <para>Different instructions have different default roots. The
              default is selected to be likely to be a common relativity
              root.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>LIST</title>

        <para>[STRING | SYMBOL-REFERENCE]...</para>

        <itemizedlist>
          <listitem>
            <para>symbol references</para>

            <itemizedlist>
              <listitem>
                <para>symbol references uses special reference syntax</para>
              </listitem>

              <listitem>
                <para>A top level symbol reference must be either a string or
                a list symbol.</para>

                <para>If it is a list symbol, the resulting list is the
                concatenation of the surrounding elements and the (elemets of
                the) list symbol.</para>

                <para>Unquoted symbol reference without non-space characters
                around it.</para>

                <itemizedlist>
                  <listitem>
                    <para>naked symbol reference</para>
                  </listitem>

                  <listitem>
                    <para>top level symbol reference without non-space
                    characters around it</para>
                  </listitem>

                  <listitem>
                    <para>unquoted symbol reference ....</para>
                  </listitem>

                  <listitem>
                    <para>symbol reference not inside quotes ...</para>
                  </listitem>

                  <listitem>
                    <para>top level symbol reference ... ("levels" ??? what is
                    top and what is non-top level ??)</para>
                  </listitem>

                  <listitem>
                    <para>symbol reference not embedded in(side) a string
                    ...</para>
                  </listitem>

                  <listitem>
                    <para>just a symbol reference ...</para>
                  </listitem>

                  <listitem>
                    <para>plain symbol reference (clashes with plain/special
                    syntax) ...</para>
                  </listitem>

                  <listitem>
                    <para/>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <section>
          <title>Special syntax for definition of list symbol</title>

          <para>VALUE may be empty, to define an empty list. This is the only
          way to specify an empty list.</para>
        </section>
      </section>

      <section>
        <title>INTEGER</title>

        <para>Syntax of STRING. Interpreted as Python expression.</para>

        <para>Custom restriction on value (0 - 255 for exit codes,
        e.g.)</para>
      </section>

      <section>
        <title>Enumerated values. E.g. file type</title>

        <para>Literal. Must be constant.</para>
      </section>

      <section>
        <title>REG-EX</title>

        <para>Literal. Must be constant.</para>
      </section>

      <section>
        <title>Logic type values</title>

        <para>Special expression syntax.</para>
      </section>
    </section>
  </section>
</article>
