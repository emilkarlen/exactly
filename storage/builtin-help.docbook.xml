<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns2="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Exactly 0.9</title>
  </info>

  <section>
    <title>Concepts</title>

    <section>
      <title>Symbol</title>

      <para>A named, constant, value.</para>

      <para>A symbol corresponds to a variable, found in most programming
      languages, except that it is constant.</para>

      <itemizedlist>
        <listitem>
          <para>purpose, structure</para>

          <itemizedlist>
            <listitem>
              <para>type system (data / logic)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>def</para>
        </listitem>

        <listitem>
          <para>ref</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Types</title>

        <para>The value of a symbol has a type according to Exactly's type
        system.</para>

        <para>The types are:</para>

        <itemizedlist>
          <listitem>
            <para>Data types</para>
          </listitem>

          <listitem>
            <para>Logic types</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Definition</title>

        <para>A symbol is defined using the <command>def</command>
        instruction:</para>

        <programlisting>def string SYMBOL_NAME = "the symbol value"</programlisting>

        <para>This defines the symbol <code>SYMBOL_NAME</code> to be the value
        <code>the symbol value</code>, which is a value of type
        <code>string</code>.</para>

        <para>The type must be given explicitly.</para>

        <programlisting>def list             LIST_SYMBOL = first second "the third"

def file-transformer REPLACE_ID  = replace [0-9]{10} ID</programlisting>

        <para>&lt;Describe syntax (reg-ex) of symbol name&gt;</para>
      </section>

      <section>
        <title>Reference</title>

        <para>A symbol must be defined before it is referenced.</para>

        <para>A symbol reference may appear as an instruction argument, in
        most places where an argument of a certain type is expected.</para>

        <para>There are two forms of symbol references:</para>

        <variablelist>
          <varlistentry>
            <term>plain symbol name</term>

            <listitem>
              <para><code>SYMBOL_NAME</code></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>special syntax</term>

            <listitem>
              <para><code>@[SYMBOL_NAME]@</code></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The plain symbol name is used where a reference is
        unambiguous.</para>

        <programlisting>def string S = "reference to @[symbol_name]@"

exists --file --rel DIR_SYMBOL @[BASE_NAME_SYMBOL]@

stdout --transformed ( select LINE_MATCHER_SYMBOL ) ! empty</programlisting>

        <note>
          <para>--TRANSFORMED instead of --transformed</para>
        </note>
      </section>
    </section>

    <section>
      <title>Type</title>

      <para>What are types used for?</para>

      <para>Type of</para>

      <itemizedlist>
        <listitem>
          <para>instruction argument (most instruction arguments have a
          type)</para>
        </listitem>

        <listitem>
          <para>symbol (every symbol has a type)</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Does every instruction argument value has a type?</title>

        <para>No, here document is a string, but a string symbol cannot be
        defined in terms of a here doc. This should be fixed - a here doc is
        just an alt syntax of strings.</para>

        <itemizedlist>
          <listitem>
            <para>string, here-document, custom syntax to eol for run
            --source</para>

            <para>All these can be considered to be strings, since the value
            is treated in the same way.</para>

            <para>What differs is the syntax. So there are many different
            syntaxes for strings.</para>
          </listitem>

          <listitem>
            <para>enums: file, dir, symlink</para>

            <para>There is no type for these enumerated values.</para>
          </listitem>

          <listitem>
            <para>delimiters. For example "(", ")", "|" for logical data type
            values</para>

            <para>These can be considered to be part of the syntax for the
            corresponding logic data type.</para>
          </listitem>

          <listitem>
            <para>expression for integers</para>

            <para>The syntax is the syntax for strings. And referenced symbols
            must be strings.</para>

            <para>Or, the syntax is the syntax of Python expressions.</para>

            <para>From Exactly's point of view of parsing, the syntax is that
            of strings.</para>

            <para>From the point of view of evaluation, the syntax is that of
            Python expressions.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Expressions and syntax</title>

        <para>Exactly has a very limited, and specialized syntax for
        expressions.</para>

        <para>A lot of values must be supplied as a constant and cannot
        involve arbitrary expressions. For example file type argument
        <token>file</token>, <token>dir</token>, <token>symlink</token>,
        cannot be given as an expression involving symbol references,e.g. Also
        regular expressions must be given literary. On the other hand,
        integers may be given as an Python expression involving symbol
        references.</para>

        <para>The most sofisticated, and conventional syntax is the one for
        logic type values.</para>

        <para>Syntax for paths is highly specialized.</para>

        <para>Syntax for lists is simple, but relatively conventional and
        clear.</para>

        <para>Syntax for strings is very specialized and does not support
        conventional expressions (x + y becomes "@[x]@ @[y]@")</para>
      </section>

      <section>
        <title>One line</title>

        <para>Type system for symbols and instruction arguments</para>
      </section>

      <section>
        <title>Main rest</title>

        <para>PGM has a type system specialized for test cases.</para>

        <para>Every symbol, and most instruction arguments, have a
        type.</para>

        <para>There are two categories of types:</para>

        <itemizedlist>
          <listitem>
            <para>data types<itemizedlist>
                <listitem>
                  <para>string</para>
                </listitem>

                <listitem>
                  <para>path</para>
                </listitem>

                <listitem>
                  <para>list</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>logic types</para>

            <itemizedlist>
              <listitem>
                <para>line matcher</para>
              </listitem>

              <listitem>
                <para>file matcher</para>
              </listitem>

              <listitem>
                <para>file transformer</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>A data type value is pure data.</para>

        <para>A logic type value is a pure function.</para>
      </section>

      <section>
        <title>Syntax</title>

        <para>Logic type values has a syntax that resembles common syntax of
        expressions.</para>

        <para>Each data type, on the other hand, has it's own specialized
        syntax.</para>
      </section>

      <section>
        <title>Type conversion (of data types)</title>

        <!--Should be described as part of descr of specific type. But overall cast func should be described here.

But perhaps the type sys does not support casting. Instead, different syntaxes allow for constructing of type B from type A.

Yes, casting is supported - casting data type -> string-->

        <section>
          <title>path|list -&gt; string</title>

          <para>Paths and lists are casted to strings.</para>
        </section>

        <section>
          <title>path</title>

          <variablelist>
            <varlistentry>
              <term>PATH = PATH</term>

              <listitem>
                <para/>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>PATH = RELATIVITY SUB-PATH (string) : RELATIVITY
              STRING</term>

              <listitem>
                <para/>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term/>

              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
    </section>

    <section>
      <title>Directory Structures</title>

      <para>Aspects of directories and files</para>

      <itemizedlist>
        <listitem>
          <para>why directories?</para>
        </listitem>

        <listitem>
          <para>pre-existing / temporary per tc-execution</para>
        </listitem>

        <listitem>
          <para>contains predefined files / empty at start</para>
        </listitem>

        <listitem>
          <para>acceptable to modify file/contents of dir</para>
        </listitem>

        <listitem>
          <para>can be set to arbitrary directories by instructions /
          predefined values that cannot be set</para>
        </listitem>

        <listitem>
          <para>purpose - typical usage (raison d'etre) (both of directory
          structure, and individual directory)</para>
        </listitem>

        <listitem>
          <para>current directory</para>
        </listitem>

        <listitem>
          <para>ways to refer to a directory (special support by options) (the
          ability to use all these directories)</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Test Case Directory Structure</title>

        <section>
          <title>Info to provide</title>

          <itemizedlist>
            <listitem>
              <para>contains the HDS (preexisting dirs)</para>
            </listitem>

            <listitem>
              <para>contains the SDS (temporary dirs)</para>
            </listitem>

            <listitem>
              <para>contains reserved directories that should not be accessed
              (in the <glossterm>sandbox</glossterm>)</para>
            </listitem>

            <listitem>
              <para>behaviour of SUT: files and directories should preferable
              only be created in the SDS directories</para>
            </listitem>

            <listitem>
              <para>PGM has support for referring to all of these
              directories</para>
            </listitem>

            <listitem>
              <para>? Purpose of PGM is to</para>

              <itemizedlist>
                <listitem>
                  <para><glossterm>sandbox</glossterm> allow the SUT to
                  pollute CD and other dirs without polluting existing
                  directories (existing = directories that exist before the
                  execution of a test case)</para>
                </listitem>

                <listitem>
                  <para><glossterm>home</glossterm>: easily access existing
                  files and directories and use them in a test, either by
                  referring to them (read-only files) or installing them into
                  the sandbox (files that may be modified)</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para><glossterm>home</glossterm> must exist, partly because a
              test case is executed in the <glossterm>sandbox</glossterm> - CD
              is changed to a new directory, so special mechanisms are needed
              to access preexisting files</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Single line descr</title>

          <para>Preexisting and temporary directories accessed by a test
          case.</para>
        </section>

        <section>
          <title>Rest</title>

          <para/>
        </section>
      </section>

      <section>
        <title>Home Directory Structure</title>

        <section>
          <title><emphasis>Predefined directories and files accessed by a test
          case</emphasis></title>

          <para>Typically, the directories in the HDS exist before the test
          case is executed. They contain files read by, but not modified by,
          the test case.</para>

          <para>All of these directories are "configuration parameters", which
          means that they can be set in [conf]. The values cannot be changed
          after [conf].</para>

          <para>The HDS consists of the following directories:</para>

          <variablelist>
            <varlistentry>
              <term>case home</term>

              <listitem>
                <para><emphasis>Default location of predefined helper files,
                that should probably not be modified</emphasis></para>

                <para>Default: the directory that contains the test case
                file.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>act home</term>

              <listitem>
                <para><emphasis>Location of the SUT file, referenced from
                [act]</emphasis></para>

                <para>Default: the directory that contains the test case
                file.</para>

                <itemizedlist>
                  <listitem>
                    <para>Default value:</para>
                  </listitem>

                  <listitem>
                    <para>Set in [conf] via configuration parameter
                    &lt;name&gt;</para>
                  </listitem>

                  <listitem>
                    <para>env var/builtin symbol</para>
                  </listitem>

                  <listitem>
                    <para>relativity options</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section>
          <title>Info to provide</title>

          <itemizedlist>
            <listitem>
              <para>existing directories</para>
            </listitem>

            <listitem>
              <para>default home/case = dir where test case file is
              located</para>
            </listitem>

            <listitem>
              <para>default home/act = dir where test case file is
              located</para>
            </listitem>

            <listitem>
              <para>contains files and directories that typically must not be
              modified</para>
            </listitem>

            <listitem>
              <para>specified in the [conf] phase, and cannot be modified
              thereafter</para>
            </listitem>

            <listitem>
              <para>typlical uses</para>

              <itemizedlist>
                <listitem>
                  <para>SUT</para>
                </listitem>

                <listitem>
                  <para>input</para>
                </listitem>

                <listitem>
                  <para>expected output</para>
                </listitem>

                <listitem>
                  <para>helper programs</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>PGM has support for referring to all of these
              directories</para>
            </listitem>

            <listitem>
              <para>directories</para>

              <variablelist>
                <varlistentry>
                  <term>home</term>

                  <listitem>
                    <para>Default location of predefined helper files, that
                    should probably not be modified.</para>

                    <itemizedlist>
                      <listitem>
                        <para>input</para>
                      </listitem>

                      <listitem>
                        <para>expected output</para>
                      </listitem>

                      <listitem>
                        <para>helper programs</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>act-home</term>

                  <listitem>
                    <para>Location of the system-under-test file, referenced
                    from [act]</para>

                    <itemizedlist>
                      <listitem>
                        <para>"act-home" configuration parameter</para>
                      </listitem>

                      <listitem>
                        <para>set by "act-home" instruction in [act]</para>
                      </listitem>

                      <listitem>
                        <para>if [act] is not used (null actor), or SUT is not
                        a file, this dir is not used (or may be used for other
                        things)</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Sandbox Directory Structure</title>

        <section>
          <title><emphasis>Temporary directories used during a single
          execution of a test case, one of which is the current directory when
          [setup] begins</emphasis></title>

          <itemizedlist>
            <listitem>
              <para>The sandbox directory structure is created when [setup]
              begins, and deleted after the test case ends.</para>
            </listitem>

            <listitem>
              <para>Contains the following directories</para>

              <variablelist>
                <varlistentry>
                  <term><filename>act</filename></term>

                  <listitem>
                    <para><emphasis>This is the current directory when [setup]
                    begins</emphasis></para>

                    <para>This directory is initially empty.</para>

                    <para>If [act] (is a program that (is expected to))
                    operates on files, then this directory may be used as an
                    area for these files.</para>

                    <para>[setup] may populate the directory with files, and
                    may also change the current directory.</para>

                    <para>Then [act] may operate on the files, and [assert]
                    can check the contents of files and directories.</para>

                    <para/>

                    <para>If [act] operates on files, [setup] may create such
                    files that should exist before [act] starts. [setup] may
                    also change the current directory. Then [assert] may check
                    the contents of this directory.</para>

                    <para>If needed, [setup] may populate this directory with
                    files that [act] is expected to operate on. [setup] may
                    also change the current directory.</para>

                    <para>[assert] may check the contents, as a check of side
                    effects of [act]</para>

                    <para>[setup] is re</para>

                    <itemizedlist>
                      <listitem>
                        <para>[setup] may populate this directory with files
                        that [act] is expected to operate on; and change the
                        current directory if needed</para>
                      </listitem>

                      <listitem>
                        <para>[act] may read and modify files found
                        here</para>
                      </listitem>

                      <listitem>
                        <para>[assert] may checks the contents</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><filename>result</filename></term>

                  <listitem>
                    <para><emphasis>Stores OS process result of [act], so that
                    [assert] may check it</emphasis></para>

                    <para>As part of executing [act], PGM populates this
                    directory with files containing properties of the OS
                    process result.</para>

                    <para>[assert] has instructions for checking these
                    properties.</para>

                    <table>
                      <title/>

                      <tgroup cols="2">
                        <thead>
                          <row>
                            <entry align="center">File</entry>

                            <entry align="center">[assert] instruction</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry>exitcode</entry>

                            <entry>exitcode</entry>
                          </row>

                          <row>
                            <entry>stdout</entry>

                            <entry>stdout</entry>
                          </row>

                          <row>
                            <entry>stderr</entry>

                            <entry>stderr</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>

                    <para>These files may be accessed by custom code (via the
                    "run" instruction, e.g."), if custom assertions and
                    cleanup e.g. is needed.</para>

                    <para>A test case should not modify the contents of this
                    directory.</para>

                    <para/>

                    <para/>

                    <para>As part of executing [act], PGM populates this
                    directory with files containing</para>

                    <itemizedlist>
                      <listitem>
                        <para>exit code,</para>
                      </listitem>

                      <listitem>
                        <para>standard output,</para>
                      </listitem>

                      <listitem>
                        <para>standard error output</para>
                      </listitem>
                    </itemizedlist>

                    <para>from the [act] process. [assert] has instructions
                    for checking these properties:</para>

                    <table>
                      <title/>

                      <tgroup cols="2">
                        <thead>
                          <row>
                            <entry align="center">File</entry>

                            <entry align="center">[assert] instruction</entry>
                          </row>
                        </thead>

                        <tbody>
                          <row>
                            <entry>exitcode</entry>

                            <entry>exitcode</entry>
                          </row>

                          <row>
                            <entry>stdout</entry>

                            <entry>stdout</entry>
                          </row>

                          <row>
                            <entry>stderr</entry>

                            <entry>stderr</entry>
                          </row>
                        </tbody>
                      </tgroup>
                    </table>

                    <para>These files may be accessed by custom code (via the
                    "run" instruction, e.g."), if custom assertions and
                    cleanup e.g. is needed.</para>

                    <para>A test case should not modify the contents of this
                    directory.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><filename>tmp</filename></term>

                  <listitem>
                    <para><emphasis>Reserved for custom helper files, used by
                    the test case implementation</emphasis></para>

                    <para>This directory is initially empty.</para>

                    <para>PGM does to touch this directory.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Info to provide</title>

          <itemizedlist>
            <listitem>
              <para>(A) temporary directories used during a single execution
              of a test case, one of which is the CD when [setup]
              begins.</para>

              <itemizedlist>
                <listitem>
                  <para>created when the [setup] phase begins</para>
                </listitem>

                <listitem>
                  <para>deleted after the test case ends (which deletes all
                  contents in them)</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>files and dirs created and modified by the actual test
              case</para>
            </listitem>

            <listitem>
              <para>files and dirs created by PGM to support assertions</para>
            </listitem>

            <listitem>
              <para>typlical uses</para>

              <itemizedlist>
                <listitem>
                  <para>files that SUT is supposed to
                  access/modify/delete</para>
                </listitem>

                <listitem>
                  <para>temporary helper files (tmp/)</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>directories</para>

              <variablelist>
                <varlistentry>
                  <term><filename>act</filename></term>

                  <listitem>
                    <itemizedlist>
                      <listitem>
                        <para>is CD when [setup] begins</para>

                        <para>this information about SDS - that it contains a
                        directory that is CD when [setup] starts, is paramount
                        in the information to describe.</para>

                        <para>Many programs use temporary directories for
                        storing information needed behind the scenes. This is
                        radically different from PGM: PGM uses temporary
                        directories to help the test case implementer
                        preventing the SUT to pollute source code. The way
                        this is implemented is e.g.</para>

                        <itemizedlist>
                          <listitem>
                            <para>setting the CD to a temporary directory</para>
                          </listitem>

                          <listitem>
                            <para><emphasis>preventing instructions that may
                            modify files from referring to the HDS (by not
                            allowing certain relativities)</emphasis></para>
                          </listitem>
                        </itemizedlist>
                      </listitem>

                      <listitem>
                        <para>contains arrangement of files expected by the
                        SUT</para>
                      </listitem>

                      <listitem>
                        <para>[setup] is responsible for populating it, and
                        may set the CD</para>
                      </listitem>

                      <listitem>
                        <para>[act] may modify the contents</para>
                      </listitem>

                      <listitem>
                        <para>[assert] may checks the contents as part of the
                        assertion</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><filename>result</filename></term>

                  <listitem>
                    <itemizedlist>
                      <listitem>
                        <para>standard process result from [act]</para>

                        <itemizedlist>
                          <listitem>
                            <para><filename>exitcode</filename></para>
                          </listitem>

                          <listitem>
                            <para><filename>stdout</filename></para>
                          </listitem>

                          <listitem>
                            <para><filename>stderr</filename></para>
                          </listitem>
                        </itemizedlist>
                      </listitem>

                      <listitem>
                        <para>[assert] may check the result</para>

                        <itemizedlist>
                          <listitem>
                            <para><command>exitcode</command> instruction</para>
                          </listitem>

                          <listitem>
                            <para><command>stdout</command> instruction</para>
                          </listitem>

                          <listitem>
                            <para><command>stderr</command> instruction</para>
                          </listitem>

                          <listitem>
                            <para>may be checked by custom assertions
                            (<command>run</command> instruction)</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><filename>tmp</filename></term>

                  <listitem>
                    <para>a place to put temporary helper files, for custom
                    assertions</para>

                    <para>PGM does not touch the contents of this dir</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </itemizedlist>

          <section>
            <title>Extra</title>

            <itemizedlist>
              <listitem>
                <para>--keep prevents Exactly from deleting the sandbox.
                Instead of printing the result of the test case, the name of
                the sandbox root directory is printed on stdout.</para>
              </listitem>

              <listitem>
                <para>PGM has support for referring to all of these
                directories</para>
              </listitem>

              <listitem>
                <para>all dirs have a common sandbox root directory</para>
              </listitem>

              <listitem>
                <para>the exact location of the directories is
                undefined</para>
              </listitem>

              <listitem>
                <para>relativity options should be used to refer to these
                directories</para>
              </listitem>

              <listitem>
                <para>directory locations cannot be altered (as those in the
                HDS)</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
      </section>
    </section>
  </section>

  <section>
    <title>Syntax</title>

    <para>A type may have many syntaxes</para>

    <section>
      <title>STRING</title>

      <para>Many syntaxes</para>

      <itemizedlist>
        <listitem>
          <para>here document</para>
        </listitem>

        <listitem>
          <para>hard quoted</para>
        </listitem>

        <listitem>
          <para>soft quoted</para>
        </listitem>

        <listitem>
          <para>unquoted</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Info</title>

        <itemizedlist>
          <listitem>
            <para>References to path and list symbols (inside soft quotes?)
            are converted to string values.</para>
          </listitem>

          <listitem>
            <para>String type symbols (using Posix syntax) are used to specify
            relative paths.</para>
          </listitem>

          <listitem>
            <para>Conversion to string: PATH, LIST</para>
          </listitem>

          <listitem>
            <para>References to symbols - as naked expressions and inside
            quoting, and concatenated</para>
          </listitem>

          <listitem>
            <para>Quoting</para>
          </listitem>

          <listitem>
            <para>forms</para>

            <itemizedlist>
              <listitem>
                <para>hard quoted</para>
              </listitem>

              <listitem>
                <para>soft quoted</para>
              </listitem>

              <listitem>
                <para>unquoted</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>symbol refs</para>

            <itemizedlist>
              <listitem>
                <para>in naked strings</para>
              </listitem>

              <listitem>
                <para>in soft quoted strings</para>
              </listitem>

              <listitem>
                <para>NOT in hard quoted strings</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Documentation</title>

        <para>Forms</para>

        <variablelist>
          <varlistentry>
            <term>CHARACTER...</term>

            <listitem>
              <para>A "naked" sequence of characters.</para>

              <para>CHARACTER may not be whitespace.</para>

              <para>Any SYMBOL-REFERENCE appearing in the string is
              substituted.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>"CHARACTER..."</term>

            <listitem>
              <para>Characters surrounded by "soft quotes" (').</para>

              <para>Any SYMBOL-REFERENCE appearing in the string is
              substituted.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>'CHARACTER...'</term>

            <listitem>
              <para>Characters surrounded by "hard quotes" (").</para>

              <para>Symbol references are not substituted.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <section>
          <title>Symbol references</title>

          <para>Any SYMBOL-REFERENCE must be a symbol of a "data" type:</para>

          <itemizedlist>
            <listitem>
              <para>string</para>
            </listitem>

            <listitem>
              <para>list</para>
            </listitem>

            <listitem>
              <para>path</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>

    <section>
      <title>PATH</title>

      <para>A file path, with support for paths inside the test case directory
      structure.</para>

      <para>A file path, with support for referencing the test case
      directories.</para>

      <para>A file path, with support for the test case directories.</para>

      <para>[RELATIVITY] STRING</para>

      <note>
        <para>Special syntax for definition of path symbol: empty
        string.</para>

        <para>This denots the default relativity root directory. An
        alternative equivalent specification is ".".</para>

        <para>Believe it is best to note this in doc of <command>def</command>
        - add "special" notes about value syntax. A bit strange to have notes
        about syntax in this way - notes to be "integrated" into the syntax
        description found in a separate place.</para>
      </note>

      <note>
        <para>Vad ska beskrivas i type/path, och vad i syntax/path?</para>

        <para>Kan bli abstrakt = svårbegripligt att beskriva i type/path i och
        med att syntaxen inte visas.</para>

        <para>Men borde kunna ge en övergripande vettig beskrivning. Kanske
        tom bra att beskriva koncepten utan att blanda in syntax.</para>
      </note>

      <section>
        <title>Where</title>

        <section>
          <title>STRING</title>

          <para>A relative or absolute path, using Posix syntax.</para>

          <para>It is a value of type string, and thus uses STRING
          syntax.</para>

          <para>May contain symbol references. Referenced symbol must be
          either of type "string" or "path".</para>

          <para>If s path symbol is referenced, it must be the initial path
          component. The reason for this is that path symbols denot absolute
          paths. (Even if a path symbol is defined relative the CD, it is
          considered to be an absolute path, since the CD is an absolute path
          at the moment the path is used/resolved).</para>

          <para>A symbol that is the initial path component may be a path
          symbol (defined with type path). If it is, a RELATIVITY option may
          not be given.</para>

          <para>Symbol references use special syntax @[SYMBOL]@ /
          @[SYMBOL_NAME]@ / @[NAME]@</para>

          <para>E tries to be clever at interpreting symbols. If it begins
          with a symbol S (S/P) that denots an absolute path, then it is the
          same as giving --rel S P.</para>

          <section>
            <title>Få med</title>

            <itemizedlist>
              <listitem>
                <para>STRING är sträng - syntax för type/string.</para>
              </listitem>

              <listitem>
                <para>Posix syntax (syntax)</para>
              </listitem>

              <listitem>
                <para>may be an absolute or relative path</para>

                <variablelist>
                  <varlistentry>
                    <term>relative</term>

                    <listitem>
                      <para>STRING is relative the directory specified by
                      RELATIVITY, or the default relativity if not
                      given.</para>

                      <para>(default relativity varies, it is specified for
                      each place a path is expected (different for different
                      arguments to same instruction))</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>absolute</term>

                    <listitem>
                      <para>RELATIVITY must not be given</para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </listitem>

              <listitem>
                <para>STRING: Kan innehålla symbolreferenser pss som strängar
                gör det. (behöver nämnas här?? nämns i syntax-beskr för
                STRING. men vettigt att nämna här för att underlätta för
                användaren genom att begränsa antalet noder denne behöver
                hitta och läsa).</para>

                <para>STRING may contain symbol references using special
                syntax, if unquoted or inside double quotes.</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>

        <section>
          <title>RELATIVITY</title>

          <para>Specifies a directory that the given STRING is relative
          to.</para>

          <para>If relativity is given, STRING must be a relative path (, and
          it is relative the given directory).</para>

          <para>Relativity variants</para>

          <itemizedlist>
            <listitem>
              <para>one of Exactly's test case directories/predefined
              directories / a dir in the test case directory structure / one
              of the test case directories.</para>

              <itemizedlist>
                <listitem>
                  <para>Options for directories of the HDS</para>

                  <variablelist>
                    <varlistentry>
                      <term><option>--rel-home</option></term>

                      <listitem>
                        <itemizedlist>
                          <listitem>
                            <para>refers to case-home directory</para>
                          </listitem>

                          <listitem>
                            <para>set in [conf] by "home" instruction ("home"
                            configuration parameter)</para>
                          </listitem>

                          <listitem>
                            <para>this is the ...</para>

                            <itemizedlist>
                              <listitem>
                                <para>case-home directory</para>
                              </listitem>

                              <listitem>
                                <para>"home" conf param</para>
                              </listitem>

                              <listitem>
                                <para>EXACTLY_HOME env var</para>
                              </listitem>

                              <listitem>
                                <para>EXACTLY_HOME builtin path symbol</para>
                              </listitem>
                            </itemizedlist>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><option>--rel-act-home</option></term>

                      <listitem>
                        <para>STRING is relative the ...</para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </listitem>

                <listitem>
                  <para>Options for directories of the SDS</para>

                  <variablelist>
                    <varlistentry>
                      <term><option>--rel-act</option></term>

                      <listitem>
                        <itemizedlist>
                          <listitem>
                            <para>this is the ...</para>

                            <itemizedlist>
                              <listitem>
                                <para>act directory</para>
                              </listitem>

                              <listitem>
                                <para>act/ dir inside the SDS (mention this?? it
                                mentions the actula name/path, which may encourage
                                to use a hard coded value in test cases)</para>
                              </listitem>

                              <listitem>
                                <para>EXACTLY_ACT env var</para>
                              </listitem>

                              <listitem>
                                <para>EXACTLY_ACT builtin path symbol</para>
                              </listitem>
                            </itemizedlist>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><option>--rel-tmp</option></term>

                      <listitem>
                        <para>STRING is relative the ...</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><option>--rel-result</option></term>

                      <listitem>
                        <para>STRING is relative the ...</para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>relative the current directory - the directory that is CD
              when the PATH is used</para>

              <variablelist>
                <varlistentry>
                  <term><option>--rel-cd</option></term>

                  <listitem>
                    <para>STRING is relative the current directory.</para>

                    <para>(the directory that is current when the path is
                    used.)</para>

                    <note>
                      <para>For defining symbols. It must be clear that the
                      path is relative the D that is CD <emphasis>when the
                      symbol/path is used</emphasis>, and not when it is
                      defined.</para>

                      <para>This may be mentioned either here - at descr of
                      PATH syntax - and/or at descr of def.</para>
                    </note>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>

            <listitem>
              <para>relative a path symbol</para>

              <variablelist>
                <varlistentry>
                  <term><option>--rel</option> SYMBOL</term>

                  <listitem>
                    <para>STRING is relative the path denoted by a
                    symbol.</para>

                    <para>The plain symbol name is used (not special reference
                    syntax)</para>

                    <para>SYMBOL must have been defined as a path
                    symbol/value.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </itemizedlist>

          <section>
            <title>Få med</title>

            <itemizedlist>
              <listitem>
                <para>Vad relativitet betyder</para>

                <para>Challenge. Everyone knows what a relative path is -
                every one know that a relative path is a path that is relative
                to <emphasis>something</emphasis>. The challenge is to find
                best names of these concepts involved.</para>

                <para>What is the best name for this
                <emphasis>something</emphasis>.</para>

                <itemizedlist>
                  <listitem>
                    <para>base path</para>

                    <para>- clashes with "base name", which is the part of a
                    file name before the extension.</para>
                  </listitem>

                  <listitem>
                    <para>relativity root dir</para>

                    <para>Best name so far.</para>

                    <para>+ "relativity" is already a concept that is used in
                    many places.</para>

                    <para>+ "root" is a common word for "root like"
                    stuff.</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Lista o förklaring av alla relativiteter</para>
              </listitem>

              <listitem>
                <para>Olika "platser"/"användningar" har en delmängd av dessa
                relativiteter.</para>
              </listitem>

              <listitem>
                <para>Utgångs-relativitet beroende på plats (kan vara olika
                inom en och samma instruktion). Utgångsrelativitet varierar -
                försöker vara vanligt förekommande val.</para>
              </listitem>

              <listitem>
                <para>What relativity of CD means: STRING is relative the
                directory that is CD when the value is used by an instruction
                that is not <command>def</command>.</para>

                <para>Difficult to explain: You cannot say that it is relative
                the CD where it is ...</para>

                <itemizedlist>
                  <listitem>
                    <para>... referenced</para>

                    <para>since it can be referenced also from the
                    <command>def</command> instruction.</para>
                  </listitem>

                  <listitem>
                    <para>... used by an instruction</para>

                    <para>since <command>def</command> is also an
                    instruction.</para>
                  </listitem>
                </itemizedlist>

                <para>Maybe the only way to make this clear is to not have
                <option>--rel-cd</option> as an option for
                <command>def</command>. This requires that RELATIVITY is
                mandatory for the <command>def</command> instruction, since no
                other relativity makes a reasonable default.</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
      </section>

      <section>
        <title>Description</title>

        <itemizedlist>
          <listitem>
            <para>If RELATIVITY is not given, and STRING is a relative path,
            then STRING is relative a default relativity root.</para>

            <para>The default root depends on the instruction where the path
            is used.</para>

            <para>Different instructions have different default roots. The
            default is selected to be likely to be a common relativity
            root.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Få med</title>

          <itemizedlist>
            <listitem>
              <para>syntax [RELATIVITY] STRING</para>
            </listitem>

            <listitem>
              <para>description</para>

              <para>an absolute path, or relative the current directory - a
              relative or absolute path.</para>

              <para>Every resolved value is an absolute path.</para>

              <para>Concepts</para>

              <itemizedlist>
                <listitem>
                  <para>test case directories (directory structures)</para>

                  <itemizedlist>
                    <listitem>
                      <para>test case directories</para>
                    </listitem>

                    <listitem>
                      <para>home directories</para>
                    </listitem>

                    <listitem>
                      <para>sandbox directories</para>
                    </listitem>

                    <listitem>
                      <para>current directory</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>path concepts</para>

                  <itemizedlist>
                    <listitem>
                      <para>path</para>
                    </listitem>

                    <listitem>
                      <para>path component</para>
                    </listitem>

                    <listitem>
                      <para>absolute path</para>
                    </listitem>

                    <listitem>
                      <para>relative path</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>syntax</para>

                  <itemizedlist>
                    <listitem>
                      <para>Posix syntax (syntax)</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>

    <section>
      <title>LIST</title>

      <para>[STRING | SYMBOL-REFERENCE]...</para>

      <itemizedlist>
        <listitem>
          <para>symbol references</para>

          <itemizedlist>
            <listitem>
              <para>symbol references uses special reference syntax</para>
            </listitem>

            <listitem>
              <para>A top level symbol reference must be either a string or a
              list symbol.</para>

              <para>If it is a list symbol, the resulting list is the
              concatenation of the surrounding elements and the (elemets of
              the) list symbol.</para>

              <para>Unquoted symbol reference without non-space characters
              around it.</para>

              <itemizedlist>
                <listitem>
                  <para>naked symbol reference</para>
                </listitem>

                <listitem>
                  <para>top level symbol reference without non-space
                  characters around it</para>
                </listitem>

                <listitem>
                  <para>unquoted symbol reference ....</para>
                </listitem>

                <listitem>
                  <para>symbol reference not inside quotes ...</para>
                </listitem>

                <listitem>
                  <para>top level symbol reference ... ("levels" ??? what is
                  top and what is non-top level ??)</para>
                </listitem>

                <listitem>
                  <para>symbol reference not embedded in(side) a string
                  ...</para>
                </listitem>

                <listitem>
                  <para>just a symbol reference ...</para>
                </listitem>

                <listitem>
                  <para>plain symbol reference (clashes with plain/special
                  syntax) ...</para>
                </listitem>

                <listitem>
                  <para/>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <section>
        <title>See also</title>

        <itemizedlist>
          <listitem>
            <para>syntax element STRING</para>
          </listitem>

          <listitem>
            <para>Concept SYMBOL</para>
          </listitem>

          <listitem>
            <para>Type list</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Special syntax for definition of list symbol</title>

        <para>VALUE may be empty, to define an empty list. This is the only
        way to specify an empty list.</para>
      </section>
    </section>

    <section>
      <title>INTEGER</title>

      <para>Syntax of STRING. Interpreted as Python expression.</para>

      <para>Custom restriction on value (0 - 255 for exit codes, e.g.)</para>
    </section>

    <section>
      <title>Enumerated values. E.g. file type</title>

      <para>Literal. Must be constant.</para>
    </section>

    <section>
      <title>REG-EX</title>

      <para>Literal. Must be constant.</para>
    </section>

    <section>
      <title>Logic type values</title>

      <para>Expression syntax that resembles common syntax of expressions with
      primitives, operators and parentheses.</para>
    </section>
  </section>

  <section>
    <title>Instruction doc</title>

    <section>
      <title>def</title>

      <para>def TYPE SYMBOL-NAME = VALUE</para>

      <para/>

      <table>
        <title/>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">TYPE</entry>

              <entry align="center">VALUE</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>string</entry>

              <entry>STRING</entry>
            </row>

            <row>
              <entry>type</entry>

              <entry>syntax</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>paths</title>

      <section>
        <title>file</title>

        <para>Creates a file</para>

        <variablelist>
          <varlistentry>
            <term>file PATH</term>

            <listitem>
              <para>...</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>file PATH HERE-DOCUMENT</term>

            <listitem>
              <para>...</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>where</para>

        <variablelist>
          <varlistentry>
            <term>PATH</term>

            <listitem>
              <para>A PATH.</para>

              <para>Default relativity</para>

              <para>Available relativities</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <simplesect>
          <title>Documentation</title>

          <para>TA BORT : Uses Posix syntax</para>
        </simplesect>

        <simplesect>
          <title>See also</title>

          <para>LÄGG TILL: PATH</para>
        </simplesect>
      </section>

      <section>
        <title>stdin</title>

        <para>Sets the contents of stdin for the act phase program</para>

        <variablelist>
          <varlistentry>
            <term>stdin (STRING|HERE-DOCUMENT|--file PATH)</term>

            <listitem>
              <para>...</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>where</para>

        <variablelist>
          <varlistentry>
            <term>PATH</term>

            <listitem>
              <para>Custom description: A PATH that ...</para>

              <para>Default relativity</para>

              <para>Available relativities</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <simplesect>
          <title>Documentation</title>

          <para>TA BORT : Uses Posix syntax</para>
        </simplesect>

        <simplesect>
          <title>See also</title>

          <para>LÄGG TILL: PATH</para>
        </simplesect>
      </section>

      <section>
        <title>install</title>

        <para>...</para>

        <variablelist>
          <varlistentry>
            <term>install SOURCE [DESTINATION]</term>

            <listitem>
              <para>...</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>where</para>

        <variablelist>
          <varlistentry>
            <term>SOURCE</term>

            <listitem>
              <para>The PATH of an existing file or directory.</para>

              <para>Default relativity</para>

              <para>Available relativities</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>DESTINATION</term>

            <listitem>
              <para>The PATH of an existing directory, or a non-existing
              file.</para>

              <para>Default relativity</para>

              <para>Available relativities</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section>
      <title>Code</title>

      <para>Funktion:</para>

      <variablelist>
        <varlistentry>
          <term>NAME, RELATIVITY-CONF, CUSTOM-INITIAL-PARAS -&gt;
          PathHelp</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term/>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>

      <informaltable>
        <tgroup cols="2">
          <colspec align="center"/>

          <tbody>
            <row>
              <entry>InvokationVariant</entry>

              <entry/>
            </row>

            <row>
              <entry>SeeAlsoList</entry>

              <entry/>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>

  <section>
    <title>Help</title>

    <para/>

    <variablelist>
      <varlistentry>
        <term>help suite SECTION</term>

        <listitem>
          <para/>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help suite SECTION INSTRUCTION</term>

        <listitem>
          <para/>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help ENTITY-TYPE [ENTITY-NAME]</term>

        <listitem>
          <para>Lists all entities of a type, or describes a given
          entity.</para>

          <table>
            <title/>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry align="center">ENTITY-TYPE</entry>

                  <entry align="center"/>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>concept</entry>

                  <entry>Concepts</entry>
                </row>

                <row>
                  <entry>confparam</entry>

                  <entry>Cofiguration parameters</entry>
                </row>

                <row>
                  <entry>type</entry>

                  <entry>Types</entry>
                </row>

                <row>
                  <entry>actor</entry>

                  <entry>Actors</entry>
                </row>

                <row>
                  <entry>syntax</entry>

                  <entry>Syntax elements</entry>
                </row>

                <row>
                  <entry>builtin</entry>

                  <entry>Builtin symbols</entry>
                </row>

                <row>
                  <entry>reporter</entry>

                  <entry>Suite reporters</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</article>
